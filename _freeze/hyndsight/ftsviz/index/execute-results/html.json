{
  "hash": "1a3d37aa900d20f5434a9da9cd213cb2",
  "result": {
    "markdown": "---\ndate: 2018-12-12\nslug: ftsviz\ntitle: \"Using ggplot2 for functional time series\"\ncategories:\n  - time series\n  - R\n  - graphics\n---\n\n\n\n\nThis week I've been attending the [Functional Data and Beyond workshop](https://www.matrix-inst.org.au/events/functional-data-analysis-and-beyond/) at the Matrix centre in Creswick.\n\nI spoke yesterday about using `ggplot2` for functional data graphics, rather than the custom-built plotting functionality available in the many functional data packages, including my own [rainbow package](https://cran.r-project.org/package=rainbow) written with Hanlin Shang.\n\nIt is a much more powerful and flexible way to work, so I thought it would be useful to share some examples.\n\n## French mortality data\n\nWe will use the French mortality data from the `demography` package, but we need to convert it into a tibble to begin.\n\n\n::: {.cell hash='index_cache/html/frenchmortality_b86b7c35730f9b214bdc21ce75e3877a'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(demography)\n\n# Combine age groups above 100\nfrmort <- set.upperage(fr.mort, 100)\n# Create tibble\nfrmort <- tibble(\n\t  year = rep(frmort$year, rep(length(frmort$age), length(frmort$year))),\n\t  age = rep(frmort$age, length(frmort$year)),\n\t  female = c(frmort$rate$female),\n\t  male = c(frmort$rate$male),\n\t) %>%\n  gather(male, female, key = \"sex\", value = \"mortrate\")\nfrmort\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 38,582 × 4\n    year   age sex   mortrate\n   <int> <dbl> <chr>    <dbl>\n 1  1816     0 male   0.223  \n 2  1816     1 male   0.0467 \n 3  1816     2 male   0.0343 \n 4  1816     3 male   0.0232 \n 5  1816     4 male   0.0161 \n 6  1816     5 male   0.0136 \n 7  1816     6 male   0.0116 \n 8  1816     7 male   0.00991\n 9  1816     8 male   0.00838\n10  1816     9 male   0.00710\n# … with 38,572 more rows\n```\n:::\n:::\n\n\nThe first thing to do is to re-create the rainbow plots that are popular for this type of data (introduced in [my paper with Hanlin in JCGS in 2010](https://robjhyndman.com/publications/rainbow-fda/)). Here the year is mapped to colour. This works quite well for mortality data because it has trended consistently over time, allowing the colors to separate. It is one of the few situations where a rainbow palette is preferred to other palettes.\n\n\n::: {.cell hash='index_cache/html/rainbow_95c80aa62f18d188d92deadd0d200802'}\n\n```{.r .cell-code}\nfrmort %>%\n  ggplot(aes(x = age, y = mortrate, group = year, col = year)) +\n    geom_line() +\n    facet_grid(~sex) +\n    scale_y_log10() +\n    xlab(\"Age\") + ylab(\"Log mortality\") +\n    scale_color_gradientn(colours = rainbow(10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/rainbow-1.png){width=672}\n:::\n:::\n\n\nAnother plot that has proved popular is to animate this rainbow plot by mapping year to animation time. With the new [`gganimate`](https://github.com/thomasp85/gganimate) package, that is as easy as adding a few more lines to the end of the above code.\n\n\n::: {.cell hash='index_cache/html/frenchanimation_fe1950d60557e371c18568e1d8747a0d'}\n\n```{.r .cell-code}\n# This requires the transformr package to be installed as well.\nlibrary(gganimate)\np <- frmort %>%\n  filter(year > 1900) %>%\n  ggplot(aes(x = age, y = mortrate, group = year, col = year)) +\n    geom_line() +\n    xlab(\"Age\") + ylab(\"Log mortality\") +\n    facet_grid(~sex) +\n    scale_y_log10() +\n    scale_color_gradientn(colours = rainbow(10)) +\n    transition_time(year) +\n    ease_aes('linear') +\n    shadow_mark(colour = \"grey70\") +\n    labs(title = 'Year: {frame_time}')\nprint(p)\n```\n:::\n\n\nAnother way of looking at the data is using an image map. Again, this is extremely easy using ggplot2.\n\n\n::: {.cell hash='index_cache/html/imageplot_4d8eeadd8bf2881b9779bf7073e500a4'}\n\n```{.r .cell-code}\nfrmort %>%\n  ggplot(aes(x = year, y = age, fill = log(mortrate))) +\n    geom_raster() +\n    facet_grid(~sex) +\n    scale_fill_viridis_c(option = \"A\", direction = -1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/imageplot-1.png){width=672}\n:::\n:::\n\n\nNote the various wars and epidemics (seen as vertical lines), and the decrease in mortality rates over time (seen as the growing light-coloured area).\n\nSince this is time series data, we should also look at the autocorrelation function. Because the data are functions of age, the autocorrelation is a surface for each lag value. The function `facf` below computes a functional ACF surface (giving correlations between different ages and across lagged years). There is some tricky non-standard evaluation used here to allow for non-quoted variables to be used when the function is called.\n\n\n::: {.cell hash='index_cache/html/facf_b708b27b4b41f8e6cb7cfa7dee11ea53'}\n\n```{.r .cell-code}\nfacf <- function(df, xvar, yvar, time, lag.max=20) {\n  key <- enquo(xvar)\n  value <- enquo(yvar)\n  timeindex <- enquo(time)\n  x <- df %>%\n    select(!!key, !!value, !!timeindex) %>%\n    spread(value=!!value, key=!!key) %>%\n    select(-!!timeindex) %>%\n    as.ts() %>%\n    acf(plot=FALSE, lag.max=lag.max, na.action=na.pass)\n  nx <- dim(x$acf)[2]\n  output <- NULL\n  for(i in seq(lag.max+1)) {\n    output <- bind_rows(output,\n      tibble(\n        lag = i-1,\n        x1 = rep(rep(0:(nx-1), nx)),\n        x2 = rep(0:(nx-1), rep(nx,nx)),\n        acf = c(x$acf[i,,])\n    ))\n  }\n  colnames(output)[2:3] <- paste0(rlang::as_name(key),1:2)\n  return(output)\n}\n# Compute FACF for the French mortality data\nfracf <- frmort %>%\n  nest(data = c(year, age, mortrate)) %>%\n  mutate(\n    acf = map(data, ~ facf(df=., xvar=age, yvar=mortrate, time=year))\n  ) %>%\n  select(-data) %>%\n  unnest(cols=acf)\n\nfracf %>%\n  filter(lag < 4) %>%\n  ggplot(aes(x = age1, y = age2, fill = acf)) +\n\t  geom_raster() +\n\t  facet_grid(sex~lag) +\n\t  scale_fill_viridis_c(option = \"A\", direction = -1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/facf-1.png){width=672}\n:::\n:::\n\n\nHere there is a striking difference between males and females, with relatively low correlations between mortality rates of males aged 18-35 and males of other ages. This is largely driven by the wars where males of those ages die at much greater rates than other males, but only for a few years. If we start the analysis from 1950, the effect is much reduced.\n\n\n::: {.cell hash='index_cache/html/facf_after1950_6925e0962d8970b1f1b7d4f4361a6fb5'}\n\n```{.r .cell-code}\nfracf <- frmort %>%\n  filter(year > 1950) %>%\n  nest(data = c(year, age, mortrate)) %>%\n  mutate(\n    acf = map(data, ~ facf(df=., xvar=age, yvar=mortrate, time=year))\n  ) %>%\n  select(-data) %>%\n  unnest(cols=acf)\nfracf %>%\n  filter(lag < 4) %>%\n  ggplot(aes(x = age1, y = age2, fill = acf)) +\n\t  geom_raster() +\n\t  facet_grid(sex~lag) +\n\t  scale_fill_viridis_c(option = \"A\", direction = -1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/facf_after1950-1.png){width=672}\n:::\n:::\n\n\nThere is still a section of low correlation around ages 18-22, with the correlations being lower for males than females. I suspect this is to do with the well-known accident bump, where young people tend to have higher mortality due to accidents and suicides than people of other ages.\n\nJim Ramsay pointed out in my talk that it would be nice to remove the redundancy due to symmetry and show the males in the top left triangles, with the females below. It turns that this is also very easy to do.\n\n\n::: {.cell hash='index_cache/html/facf_triangles_e50aa1f35747c7f4cd8126c6efc1e4bf'}\n\n```{.r .cell-code}\nfracf %>%\n  filter(\n    lag < 4,\n    (sex==\"male\" & age2 > age1) | (sex==\"female\" & age2 < age1)\n  ) %>%\n  ggplot(aes(x = age1, y = age2, fill = acf)) +\n\t  geom_raster() +\n\t  facet_grid(~lag) +\n\t  scale_fill_viridis_c(option = \"A\", direction = -1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/facf_triangles-1.png){width=672}\n:::\n:::\n\n\nFinally, the diagonals where `age1`=`age2` are of particular interest, as these correspond to the ACFs of the univariate time series comprising each age group.\n\nI will plot them in three different ways -- against age, against lag, and as a 2-d image plot.\n\n\n::: {.cell hash='index_cache/html/facf_diag_c118f73e91402b0c6577fc6881f1063a'}\n\n```{.r .cell-code}\nfracf %>%\n  filter(age1==age2) %>%\n  ggplot(aes(x = age1, y = acf, group = lag, col = lag)) +\n\t  facet_grid(~sex) +\n\t  geom_line() +\n\t  scale_color_gradientn(colours = rainbow(10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/facf_diag-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfracf %>%\n  filter(age1==age2) %>%\n  ggplot(aes(x = lag, y = acf, group = age1, col = age1)) +\n\t  geom_line() +\n\t  facet_grid(~sex) +\n\t  scale_color_gradientn(colours = rainbow(10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/facf_diag-2.png){width=672}\n:::\n\n```{.r .cell-code}\nfracf %>%\n  filter(age1==age2) %>%\n  ggplot(aes(x = lag, y = age1, fill = acf)) +\n\t  geom_raster() +\n\t  facet_grid(~sex) +\n\t  scale_fill_viridis_c(option = \"A\", direction = -1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/facf_diag-3.png){width=672}\n:::\n:::\n\n\n## Melbourne pedestrian data\n\nMy second example involves pedestrian traffic near Flinders St Station in Melbourne city. The data can be downloaded using the [`rwalkr`](https://cran.r-project.org/package=rwalkr) package, but some data is pre-packaged in the [`sugrrants`](https://cran.r-project.org/package=sugrrants) package, which we will use here.\n\nAgain, the first task is to put the data into a suitable form. We will use only data from Flinders St Station Underpass in 2016, and add in holiday information to the data set.\n\n\n::: {.cell hash='index_cache/html/pedestriandata_4a310926500ef4cf57c0d7c0bf7ac804'}\n\n```{.r .cell-code}\nlibrary(sugrrants)\npedestrian <- hourly_peds %>%\n  filter(\n    Sensor_Name == \"Flinders Street Station Underpass\",\n    Date <= as.Date(\"2016-12-31\"),\n  ) %>%\n  rename_all(tolower) %>%\n  rename(\n    hour = \"time\",\n    number = \"hourly_counts\"\n  ) %>%\n  left_join(tsibble::holiday_aus(2016, state = \"VIC\")) %>%\n  mutate(\n    daytype = ifelse(\n      day %in% c(\"Saturday\", \"Sunday\") | !is.na(holiday),\n      \"Holiday\", \"Workday\"\n    )\n  ) %>%\n  select(date, hour, day, daytype, month, number)\n\npedestrian\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,783 × 6\n   date        hour day    daytype month   number\n   <date>     <dbl> <ord>  <chr>   <ord>    <dbl>\n 1 2016-01-01     0 Friday Holiday January   3643\n 2 2016-01-01     1 Friday Holiday January   2009\n 3 2016-01-01     2 Friday Holiday January   3238\n 4 2016-01-01     3 Friday Holiday January   2164\n 5 2016-01-01     4 Friday Holiday January   1161\n 6 2016-01-01     5 Friday Holiday January    682\n 7 2016-01-01     6 Friday Holiday January    388\n 8 2016-01-01     7 Friday Holiday January    373\n 9 2016-01-01     8 Friday Holiday January    275\n10 2016-01-01     9 Friday Holiday January    545\n# … with 8,773 more rows\n```\n:::\n:::\n\n\nThe differences between days is clearly seen. It is also apparent that there were a handful of very unusual days.\n\n\n::: {.cell hash='index_cache/html/peddaytypes_1bff43a4a721fe81f54eab6d980b7dc1'}\n\n```{.r .cell-code}\npedestrian %>%\n  ggplot(aes(x = hour, y = number, group = date)) +\n\t  geom_line() +\n\t  facet_grid(~day)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/peddaytypes-1.png){width=672}\n:::\n:::\n\n\nFor sub-daily data, a calendar plot is extremely useful for identifying them, along with other interesting features in the data. The public holidays on weekdays are clearly marked here in a different colour. Can you spot deviations from the regular pattern that are not explained by holidays?\n\n\n::: {.cell hash='index_cache/html/calendar_6cb8eb0d8a99689af671baf19aeb7235'}\n\n```{.r .cell-code}\np <- pedestrian %>%\n  frame_calendar(x = hour, y = number, date = date) %>%\n  ggplot(aes(x = .hour, y = .number, group = date, colour = daytype)) +\n\t  geom_line() +\n  \ttheme(legend.position = \"bottom\")\nprettify(p)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/calendar-1.png){width=672}\n:::\n:::\n\n\nFor the ACF, I will look only at the \"diagonal surface\" --- the equivalent of the univariate ACFs for each hour, plotted for different lags.\n\n\n::: {.cell hash='index_cache/html/pedacf_713e4e27d41ae8419b44733ffe8f5921'}\n\n```{.r .cell-code}\npedestrian %>%\n  facf(xvar=hour, yvar=number, time=date, lag.max=20) %>%\n  filter(hour1==hour2) %>%\n  ggplot(aes(x = lag, y = hour1, fill = acf)) +\n\t  geom_raster() +\n\t  scale_fill_viridis_c(option = \"A\", direction = -1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/pedacf-1.png){width=672}\n:::\n:::\n\n\nHere it is interesting to note that the weekly seasonality is strongest at hours 6-9am and around 4-5pm, corresponding to the peak hours for workers. There is relatively weak correlation between 10am and 3pm, when workers are mostly working.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}