{
  "hash": "0d9130c37ed92c09907a1ef1ee698081",
  "result": {
    "markdown": "---\ndate: 2014-02-20 04:20:29+00:00\nlink: https://robjhyndman.com/hyndsight/backcasting/\nslug: backcasting\ntitle: Backcasting in R\ncategories:\n- forecasting\n- R\n- statistics\n---\n\n\nSometimes it is useful to \"backcast\" a time series --- that is, forecast in reverse time. Although there are no in-built R functions to do this, it is very easy to implement. Suppose `x` is our time series and we want to backcast for $h$ periods. Here is some code that should work for most univariate time series. The example is non-seasonal, but the code will also work with seasonal data.<!-- more -->\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_a256b371d2df45d62d10bd4404eb1d56'}\n\n```{.r .cell-code}\n    library(forecast)\n    x <- WWWusage\n    h <- 20\n    f <- frequency(x)\n    # Reverse time\n    revx <- ts(rev(x), frequency=f)\n    # Forecast\n    fc <- forecast(auto.arima(revx), h)\n    plot(fc)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n    # Reverse time again\n    fc$mean <- ts(rev(fc$mean),end=tsp(x)[1] - 1/f, frequency=f)\n    fc$upper <- fc$upper[h:1,]\n    fc$lower <- fc$lower[h:1,]\n    fc$x <- x\n    # Plot result\n    plot(fc, xlim=c(tsp(x)[1]-h/f, tsp(x)[2]))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}