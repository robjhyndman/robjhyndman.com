{
  "hash": "aec42dce0eb532584a750ef1ea5575f8",
  "result": {
    "markdown": "---\ndate: 2014-10-20 02:08:07+00:00\nlink: https://robjhyndman.com/hyndsight/hts-with-regressors/\nslug: hts-with-regressors\ntitle: hts with regressors\ncategories:\n- forecasting\n- hts\n- R\n- statistics\n---\n\n\nThe [hts package for R](http://github.com/robjhyndman/hts/) allows for forecasting hierarchical and grouped time series data. The idea is to generate forecasts for all series at all levels of aggregation without imposing the aggregation constraints, and then to reconcile the forecasts so they satisfy the aggregation constraints. (An introduction to reconciling hierarchical and grouped time series is available in [this Foresight paper](/publications/foresight-hts/).)\n\nThe base forecasts can be generated using any method, with ETS models and ARIMA models provided as options in the `forecast.gts()` function. As ETS models do not allow for regressors, you will need to choose ARIMA models if you want to include regressors.<!-- more -->\n\nSuppose `x` is a matrix of historical regressors (with each column containing one regressor and with the number of rows equal to the number of time periods of historical data), and `f` is the corresponding matrix of future regressors (with the number of rows equal to the forecast horizon). Then if `y` is an `hts` or `gts` object, the following code can be used for forecasting:\n\n```r\nfc <- forecast(y, fmethod=\"arima\", xreg=\"x\", newxreg=\"f\")\n```\n\n\n\nThat will fit a regression with ARIMA errors to each of the original series (at all levels of aggregation), produce forecasts from each model, and then reconcile the forecasts so they satisfy the aggregation constraints.\n\n\n\n### Infant deaths\n\n\n\nI will illustrate using infant death numbers for Australia. These are disaggregated by state and sex as shown below.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_ae2e466ddcf03e43a143d541543f56ff'}\n\n```{.r .cell-code}\nlibrary(hts)\nplot(infantgts)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nA potential forecasting method is to use a regression model on the log scale with a constant to 1970 and a decreasing trend thereafter. The figure below shows the model for the most aggregated data.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_c797e91ff6a2608771a33d67788c5261'}\n\n```{.r .cell-code}\nplot(log(aggts(infantgts, level=0)), xlab=\"Year\", ylab=\"Log total infant deaths\")\ny <- log(aggts(infantgts, level=0))\nz <- pmax(time(infantgts$bts) - 1970, 0)\nfit <- lm(y ~ z)\nlines(ts(fitted(fit),start=1933),col='red')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nTo apply this model to all series, and allow for ARMA errors, we can use the following code.\n\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_1603668407fbb1bc2a1bf7d5b69429e4'}\n\n```{.r .cell-code}\n    y = window(infantgts, start=1944)\n    z = pmax(time(y$bts) - 1970, 0)\n    fz = max(z) + 1:10\n    fc = forecast(y, h=10, fmethod=\"arima\", xreg=z, newxreg=fz, lambda=0)\n    plot(fc)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nI started the series at 1944 as there were a few zero observations before that, and taking logs caused problems. The argument `lambda=0` means the models are fitted to the logged data (although reconciliation must occur on the original scale).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}