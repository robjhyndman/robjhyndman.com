{
  "hash": "e4629f007f71f3c323300f8a005be520",
  "result": {
    "markdown": "---\ndate: 2017-11-29\nslug: tspackages\ntitle: \"Some new time series packages\"\ncategories:\n- R\n- reproducible-research\n- time-series\n- data science\n- data\n- anomalies\n---\n\n\n\n\nThis week I have finished preliminary versions of two new R packages for time series analysis. The first ([**tscompdata**](https://github.com/robjhyndman/tscompdata)) contains several large collections of time series that have been used in forecasting competitions; the second ([**tsfeatures**](https://github.com/robjhyndman/tsfeatures)) is designed to compute features from univariate time series data.  For now, both are only on github. I will probably submit them to CRAN after they've been tested by a few more people.\n\n## [tscompdata](https://github.com/robjhyndman/tscompdata)\n\nThere are already two packages containing forecasting competition data: [Mcomp](http://pkg.robjhyndman.com/Mcomp/) (containing the M and M3 competition data) and [Tcomp](https://cran.r-project.org/package=Tcomp) (containing the tourism competition data). In this new package [**tscompdata**](https://github.com/robjhyndman/tscompdata), we provide data from the [NN3](http://www.neural-forecasting-competition.com/NN3/), [NN5](http://www.neural-forecasting-competition.com/NN5/), [NGC1](http://www.neural-forecasting-competition.com/) and [GEFCom2012](http://www.drhongtao.com/gefcom/2012) competitions. For convenience, the Mcomp and Tcomp packages are also loaded when you load the **tscompdata** package.\n\nFor example, here is one series from the NN5 competition,   which contained daily cash money demand at various automatic teller machines (ATMs, or cash machines) at different locations in England.\n\n\n::: {.cell hash='index_cache/html/nn5_7545621dae1fe0b9f232c59840a9bffc'}\n\n```{.r .cell-code}\nlibrary(tscompdata)\nlibrary(forecast)\nlibrary(ggplot2)\nautoplot(nn5[[23]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/nn5-1.png){width=672}\n:::\n:::\n\n\nApart from the data, there is just one function so far: `combine_training_test()` to conveniently combine the training and test data used in the M, M3 and Tourism competitions.\n\n\n::: {.cell hash='index_cache/html/m3_3b94cc04cf677621847da340050d9b33'}\n\n```{.r .cell-code}\nm3combine <- combine_training_test(M3)\nautoplot(m3combine[[1500]])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/m3-1.png){width=672}\n:::\n:::\n\n\nThe purpose of this package is to allow researchers to reproduce existing research results, and to test out new time series methods on large collections of data. There is no excuse for researchers to continue to use the same old tired time series in their papers.  The combined competition data represent a relatively large range of time series that can be used for examples, for student projects, or for testing new algorithms. However, note that there are not many data sets from finance, or from the physical sciences.\n\nFor finance data, see the [Empirical Finance Task View](https://cran.r-project.org/web/views/Finance.html) for many packages that assist with downloading data from online financial databases.\n\nFor the physical sciences, see [Ben Fulcher's time series collection](https://www.comp-engine.org/) (R package: [compenginets](https://github.com/robjhyndman/compenginets)).\n\n## [tsfeatures](https://github.com/robjhyndman/tsfeatures)\n\n[**tsfeatures**](https://github.com/robjhyndman/tsfeatures) computes features from time series along the lines proposed in my papers on [\"Large scale unusual time series detection\"](/publications/icdm2015/) with Earo Wang & Nikolay Laptev, and [\"Visualising forecasting algorithm performance using time series instance spaces\"](/publications/ts-feature-space/) with Yanfei Kang & Kate Smith-Miles. It is designed to be easily extended to allow user-defined features to be used as well.\n\nPlease note that **tsfeatures** requires v8.3 of the forecast package, which is not yet on CRAN. Install it [from github](https://github.com/robjhyndman/forecast).\n\nSome examples, partly reproducing results from the above two papers follow.\n\n### [Hyndman, Wang and Laptev (ICDM 2015)](/publications/icdm2015/)\n\nHere, I compute the features used in [Hyndman, Wang & Laptev (ICDM 2015)](/publications/icdm2015/). Note that crossing_points, peak and trough are defined differently in the **tsfeatures** package than in the Hyndman et al (2015) paper. Other features are the same.\n\n\n::: {.cell hash='index_cache/html/yahoo_617d4405bebbee90e3ca7a7c62005f12'}\n\n```{.r .cell-code}\nlibrary(tsfeatures)\nlibrary(tidyverse)\nlibrary(anomalous)\n\nyahoo <- cbind(dat0, dat1, dat2, dat3)\nhwl <- bind_cols(\n         tsfeatures(yahoo,\n           c(\"acf_features\",\"entropy\",\"lumpiness\",\n             \"flat_spots\",\"crossing_points\")),\n         tsfeatures(yahoo,\"stl_features\", s.window='periodic',\n           robust=TRUE),\n         tsfeatures(yahoo, \"max_kl_shift\", width=48),\n         tsfeatures(yahoo,\n           c(\"mean\",\"var\"), scale=FALSE, na.rm=TRUE),\n         tsfeatures(yahoo,\n           c(\"max_level_shift\",\"max_var_shift\"), trim=TRUE)) %>%\n  select(mean, var, x_acf1, trend, linearity, curvature,\n         seasonal_strength, peak, trough,\n         entropy, lumpiness, spike, max_level_shift, max_var_shift,\n         flat_spots, crossing_points, max_kl_shift, time_kl_shift)\n```\n:::\n\n::: {.cell hash='index_cache/html/yahoo2_2edb688cff1ad580351fc4cf25f3d83e'}\n\n```{.r .cell-code}\n# 2-d Feature space\nprcomp(na.omit(hwl), scale=TRUE)$x %>%\n  as_tibble() %>%\n  ggplot(aes(x=PC1, y=PC2)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/yahoo2-1.png){width=672}\n:::\n:::\n\n\n### [Kang, Hyndman & Smith-Miles (IJF 2017)](/publications/ts-feature-space/)\n\nIn the following code, I compute the features used in [Kang, Hyndman & Smith-Miles (IJF 2017)](/publications/ts-feature-space/). Note that the trend and ACF1 are computed differently for  non-seasonal data in the tsfeatures package than in Kang et al (2017). **tsfeatures** uses `forecast::mstl()` which uses `supsmu()` for the trend calculation with non-seasonal data, whereas Kang et al used a penalized regression spline computed using mgcv instead.  Other features are the same.\n\n\n::: {.cell hash='index_cache/html/ijf2017_fcf930b0cd014f8b5bbad9b78eb1b45e'}\n\n```{.r .cell-code}\nlibrary(tsfeatures)\nlibrary(tscompdata)\nlibrary(tidyverse)\nlibrary(forecast)\n\nM3data <- combine_training_test(M3)\nkhs_stl <- function(x,...)\n{\n  lambda <- BoxCox.lambda(x, lower=0, upper=1, method='loglik')\n  y <- BoxCox(x, lambda)\n  c(stl_features(y, s.window='periodic', robust=TRUE, ...),\n    lambda=lambda)\n}\nkhs <- bind_cols(\n  tsfeatures(M3data, c(\"frequency\", \"entropy\")),\n  tsfeatures(M3data, \"khs_stl\", scale=FALSE)) %>%\n  select(frequency, entropy, trend, seasonal_strength,\n    e_acf1, lambda) %>%\n  replace_na(list(seasonal_strength=0)) %>%\n  rename(\n    Frequency = frequency,\n    Entropy = entropy,\n    Trend = trend,\n    Season = seasonal_strength,\n    ACF1 = e_acf1,\n    Lambda = lambda) %>%\n  mutate(Period = as.factor(Frequency))\n```\n:::\n\n::: {.cell hash='index_cache/html/ijf2017graphs_d4289a977d77e1335d7f166cd15fad7b'}\n\n```{.r .cell-code}\n# Fig 1 of paper\nkhs %>%\n  select(Period, Entropy, Trend, Season, ACF1, Lambda) %>%\n  GGally::ggpairs()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ijf2017graphs-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 2-d Feature space (Top of Fig 2)\nprcomp(select(khs, -Period), scale=TRUE)$x %>%\n  as_tibble() %>%\n  bind_cols(Period=khs$Period) %>%\n  ggplot(aes(x=PC1, y=PC2)) +\n    geom_point(aes(col=Period))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ijf2017graphs-2.png){width=672}\n:::\n:::\n\n\nThis package will make it easier for other researchers to replicate our papers, and to use a feature-based approach for analysing large collections of time series. If anyone has features they think are particularly useful, feel free to send me a pull-request with your feature functions to include in the package.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}