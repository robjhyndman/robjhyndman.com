{
  "hash": "ac4b4ffc3f4224a1f6c708b041d4ed4c",
  "result": {
    "markdown": "---\ndate: 2021-05-16\ntitle: \"Time series cross-validation using fable\"\nslug: tscv-fable\ncategories:\n  - time series\n  - R\n  - forecasting\n  - data science\n---\n\n\n\n\n[Time series cross-validation](https://otexts.com/fpp3/tscv.html)  is handled in the `fable` package using the `stretch_tsibble()` function to generate the data folds. In this post I will give two examples of how to use it, one without covariates and one with covariates.\n\n## Quarterly Australian beer production\n\nHere is a simple example using quarterly Australian beer production from 1956 Q1 to 2010 Q2. First we create a data object containing many training sets starting with 3 years (12 observations), and adding one quarter at a time until all data are included.\n\n\n::: {.cell hash='index_cache/html/beer_f05cd1f65a08d7260aac92d1950cfdb4'}\n\n```{.r .cell-code}\nlibrary(fpp3)\nbeer <- aus_production %>%\n  select(Beer) %>%\n  stretch_tsibble(.init = 12, .step=1)\nbeer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 23,805 x 3 [1Q]\n# Key:       .id [207]\n    Beer Quarter   .id\n   <dbl>   <qtr> <int>\n 1   284 1956 Q1     1\n 2   213 1956 Q2     1\n 3   227 1956 Q3     1\n 4   308 1956 Q4     1\n 5   262 1957 Q1     1\n 6   228 1957 Q2     1\n 7   236 1957 Q3     1\n 8   320 1957 Q4     1\n 9   272 1958 Q1     1\n10   233 1958 Q2     1\n# … with 23,795 more rows\n```\n:::\n:::\n\n\nThis gives 207 training sets of increasing size. We fit an ETS model to each training set and produce one year of forecasts from each model. Because I want to compute RMSE for each forecast horizon, I will add the horizon `h` to the resulting object.\n\n\n::: {.cell hash='index_cache/html/beer2_6cefb69bf2fd7413592ab1455b70dedb'}\n\n```{.r .cell-code}\nfc <- beer %>%\n  model(ETS(Beer)) %>%\n  forecast(h = \"1 year\") %>%\n  group_by(.id) %>%\n  mutate(h = row_number()) %>%\n  ungroup() %>%\n  as_fable(response=\"Beer\", distribution=Beer)\n```\n:::\n\n\nFinally, we compare the forecasts against the actual values and average over the folds.\n\n\n::: {.cell hash='index_cache/html/beer3_9b10dd8d50f744b792e772ab7c5eed7d'}\n\n```{.r .cell-code}\nfc %>%\n  accuracy(aus_production, by=c(\"h\",\".model\")) %>%\n  select(h, RMSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n      h  RMSE\n  <int> <dbl>\n1     1  17.1\n2     2  16.7\n3     3  18.1\n4     4  19.2\n```\n:::\n:::\n\n\nForecasts of 1 and 2 quarters ahead both have about the same accuracy here, but then the error increases for horizons 3 and 4.\n\n## Insurance quotes with TV advertisements\n\nThings are a little more complicated when we want to use covariates in the model. Here is an example of monthly quotations issued by a US insurance company modelled as a function of the TV advertising expenditure in the same month.\n\nThe first step is the same, where we stretch the tsibble. This time we will start with one year of data.\n\n\n::: {.cell hash='index_cache/html/insurance1_60f1660ab92a4a9a5d9ec862852d8073'}\n\n```{.r .cell-code}\nstretch <- insurance %>%\n  stretch_tsibble(.step=1, .init=12)\nstretch\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 754 x 4 [1M]\n# Key:       .id [29]\n      Month Quotes TVadverts   .id\n      <mth>  <dbl>     <dbl> <int>\n 1 2002 Jan   13.0      7.21     1\n 2 2002 Feb   15.4      9.44     1\n 3 2002 Mar   13.2      7.53     1\n 4 2002 Apr   13.0      7.21     1\n 5 2002 May   15.4      9.44     1\n 6 2002 Jun   11.7      6.42     1\n 7 2002 Jul   10.1      5.81     1\n 8 2002 Aug   10.8      6.20     1\n 9 2002 Sep   13.3      7.59     1\n10 2002 Oct   14.6      8.00     1\n# … with 744 more rows\n```\n:::\n:::\n\n\nNext we fit a regression model with AR(1) errors to each fold.\n\n\n::: {.cell hash='index_cache/html/insurance2_cb7002b7dae88673e33cf0f65ac771d4'}\n\n```{.r .cell-code}\nfit <- stretch %>%\n  model(ARIMA(Quotes ~ 1 + pdq(1,0,0) + TVadverts))\n```\n:::\n\n\nBefore we forecast, we need to provide the advertising expenditure for the future periods. We will forecast up to 3 steps ahead, so the test data needs to have 3 observations per fold.\n\n\n::: {.cell hash='index_cache/html/insurance3_69b8ad810e3fb57e7d42f2624bb315a4'}\n\n```{.r .cell-code}\ntest <- new_data(stretch, n=3) %>%\n  # Add in covariates from corresponding month\n  left_join(insurance, by=\"Month\")\ntest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 87 x 4 [1M]\n# Key:       .id [29]\n      Month   .id Quotes TVadverts\n      <mth> <int>  <dbl>     <dbl>\n 1 2003 Jan     1   17.0      9.53\n 2 2003 Feb     1   16.9      9.39\n 3 2003 Mar     1   16.5      8.92\n 4 2003 Feb     2   16.9      9.39\n 5 2003 Mar     2   16.5      8.92\n 6 2003 Apr     2   15.3      8.37\n 7 2003 Mar     3   16.5      8.92\n 8 2003 Apr     3   15.3      8.37\n 9 2003 May     3   15.9      9.84\n10 2003 Apr     4   15.3      8.37\n# … with 77 more rows\n```\n:::\n:::\n\n\nThe actual value in each month is also included, but that will be ignored when forecasting.\n\n\n::: {.cell hash='index_cache/html/insurance4_76a3afcda4a62704fd0e18c6aa74d987'}\n\n```{.r .cell-code}\nfc <- forecast(fit, new_data = test) %>%\n  group_by(.id) %>%\n  mutate(h = row_number()) %>%\n  ungroup() %>%\n  as_fable(response = \"Quotes\", distribution=Quotes)\n```\n:::\n\n\nFinally, we can compare the forecasts against the actual values, averaged across each forecast horizon.\n\n\n::: {.cell hash='index_cache/html/insurance5_1dc257bbadd93dcc30241e479c8cf826'}\n\n```{.r .cell-code}\nfc %>% accuracy(insurance, by=c(\"h\",\".model\")) %>%\n  select(h, RMSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n      h  RMSE\n  <int> <dbl>\n1     1 0.761\n2     2 1.20 \n3     3 1.49 \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}