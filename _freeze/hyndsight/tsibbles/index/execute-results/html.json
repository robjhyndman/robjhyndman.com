{
  "hash": "f339465fb53772a5d72c63304bee45d4",
  "result": {
    "markdown": "---\ndate: 2019-08-29\nslug: tsibbles\ntitle: Tidy time series data using tsibbles\ncategories:\n- time series\n- graphics\n- statistics\n- R\n- tidyverts\nimage: index_files/figure-html/ggplot-1.png\n---\n\n\n\n\nThere is a new suite of packages for tidy time series analysis, that integrates easily into the tidyverse way of working. We call these the `tidyverts` packages, and they are available at [tidyverts.org](https://tidyverts.org). Much of the work on these packages has been done by [Earo Wang](https://earo.me) and [Mitchell O'Hara-Wild](https://mitchelloharawild.com).\n\nThe first of the packages to make it to CRAN was [tsibble](https://tsibble.tidyverts.org/), providing the data infrastructure for tidy temporal data with wrangling tools.  A *tsibble* (where \"ts\" is pronounced as in cats) is a time series object that is much easier to work with than existing classes such as `ts`, `xts` and others. Existing `ts` objects can be easily converted to `tsibble` objects using `as_tsibble()`. For example\n\n\n::: {.cell hash='index_cache/html/as_tsibble_b56c4d1cdc16449c64f61b83cab5d0f6'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tsibble)\nUSAccDeaths %>% as_tsibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 72 x 2 [1M]\n      index value\n      <mth> <dbl>\n 1 1973 Jan  9007\n 2 1973 Feb  8106\n 3 1973 Mar  8928\n 4 1973 Apr  9137\n 5 1973 May 10017\n 6 1973 Jun 10826\n 7 1973 Jul 11317\n 8 1973 Aug 10744\n 9 1973 Sep  9713\n10 1973 Oct  9938\n# … with 62 more rows\n```\n:::\n:::\n\n\nThis creates an Index column which species the time or date index. These are always explicit in tsibbles, and can take a rich variety of time and date classes to handle any sort of temporal data. The second column is a measurement variable. Note the `[1M]` in the header, indicating this is monthly data.\n\nIt is also easy to create tsibbles from csv files, by first reading them in using `readr::read_csv()` and then using the `as_tsibble()` function.\n\nA more interesting `tsibble` object is `tourism`, containing quarterly overnight trips across Australia.\n\n\n::: {.cell hash='index_cache/html/tourism_c8c39775e7cd87ccc703170a096b087e'}\n\n```{.r .cell-code}\ntourism\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 24,320 x 5 [1Q]\n# Key:       Region, State, Purpose [304]\n   Quarter Region   State           Purpose  Trips\n     <qtr> <chr>    <chr>           <chr>    <dbl>\n 1 1998 Q1 Adelaide South Australia Business  135.\n 2 1998 Q2 Adelaide South Australia Business  110.\n 3 1998 Q3 Adelaide South Australia Business  166.\n 4 1998 Q4 Adelaide South Australia Business  127.\n 5 1999 Q1 Adelaide South Australia Business  137.\n 6 1999 Q2 Adelaide South Australia Business  200.\n 7 1999 Q3 Adelaide South Australia Business  169.\n 8 1999 Q4 Adelaide South Australia Business  134.\n 9 2000 Q1 Adelaide South Australia Business  154.\n10 2000 Q2 Adelaide South Australia Business  169.\n# … with 24,310 more rows\n```\n:::\n:::\n\n\nHere we have some additional columns called Keys. There should be one row for each unique combination of the keys and index. Columns which are not the index or key variables are measurement variables. In this example, there are three keys (`Region`, `State` and `Purpose`) and one Measurement (`Trips`)\n\nAll the usual tidyverse wrangling verbs apply. For example, to get the total visitor nights spent on Holiday by State for each quarter (ignoring Regions):\n\n\n::: {.cell hash='index_cache/html/holidays_77570567240387d630f08f2e91a7d9cd'}\n\n```{.r .cell-code}\ntourism %>%\n  filter(Purpose == \"Holiday\") %>%\n  group_by(State) %>%\n  summarise(Trips = sum(Trips))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 640 x 3 [1Q]\n# Key:       State [8]\n   State Quarter Trips\n   <chr>   <qtr> <dbl>\n 1 ACT   1998 Q1  196.\n 2 ACT   1998 Q2  127.\n 3 ACT   1998 Q3  111.\n 4 ACT   1998 Q4  170.\n 5 ACT   1999 Q1  108.\n 6 ACT   1999 Q2  125.\n 7 ACT   1999 Q3  178.\n 8 ACT   1999 Q4  218.\n 9 ACT   2000 Q1  158.\n10 ACT   2000 Q2  155.\n# … with 630 more rows\n```\n:::\n:::\n\n\nNote that we do not have to explicitly group by the time index as this is assumed in a `tsibble`.\n\nTo switch to annual data, we can re-index the tsibble:\n\n\n::: {.cell hash='index_cache/html/annual_e37ce91e32373990f919db392c4e6832'}\n\n```{.r .cell-code}\ntourism %>%\n  mutate(Year = lubridate::year(Quarter)) %>%\n  index_by(Year) %>%\n  group_by(Region, State, Purpose) %>%\n  summarise(Trips = sum(Trips)) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 6,080 x 5 [1Y]\n# Key:       Region, State, Purpose [304]\n   Region   State           Purpose   Year Trips\n   <chr>    <chr>           <chr>    <dbl> <dbl>\n 1 Adelaide South Australia Business  1998  538.\n 2 Adelaide South Australia Business  1999  641.\n 3 Adelaide South Australia Business  2000  787.\n 4 Adelaide South Australia Business  2001  608.\n 5 Adelaide South Australia Business  2002  697.\n 6 Adelaide South Australia Business  2003  690.\n 7 Adelaide South Australia Business  2004  734.\n 8 Adelaide South Australia Business  2005  490.\n 9 Adelaide South Australia Business  2006  568.\n10 Adelaide South Australia Business  2007  584.\n# … with 6,070 more rows\n```\n:::\n:::\n\n\nThe `index_by()` function is the counterpart of `group_by()` when dealing with the index.\n\nI often get questions about dealing with daily and sub-daily data, for which the `ts` class is particularly ill-suited. The `tsibble` class handles such data with no problem. For example, here are some hourly pedestrian counts at four sites around Melbourne, Australia.\n\n\n::: {.cell hash='index_cache/html/pedestrian_2ea0b06525f3ee62da0aea41776741dc'}\n\n```{.r .cell-code}\npedestrian\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tsibble: 66,037 x 5 [1h] <Australia/Melbourne>\n# Key:       Sensor [4]\n   Sensor         Date_Time           Date        Time Count\n   <chr>          <dttm>              <date>     <int> <int>\n 1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630\n 2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826\n 3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567\n 4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264\n 5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139\n 6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77\n 7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44\n 8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56\n 9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113\n10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166\n# … with 66,027 more rows\n```\n:::\n:::\n\n\nThe `Date` and `Time` variables split the index into two components, representing the date and the hour of day. This makes it easy to produce some interesting plots.\n\n\n::: {.cell hash='index_cache/html/ggplot_969bc908cd4b5a570247da7a8624d90b'}\n\n```{.r .cell-code}\npedestrian %>%\n  mutate(\n    Day = lubridate::wday(Date, label = TRUE),\n    Weekend = (Day %in% c(\"Sun\", \"Sat\"))\n  ) %>%\n  ggplot(aes(x = Time, y = Count, group = Date)) +\n    geom_line(aes(col = Weekend)) +\n    facet_grid(Sensor ~ .)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/ggplot-1.png){width=672}\n:::\n:::\n\n\nThe volume and pattern of pedestrian traffic at these four locations is clearly very different. See [Wang et al](https://robjhyndman.com/publications/calendar-vis/) for a more complete analysis with a cool calendar plot.\n\nIn summary, I hope `tsibbles` will become the standard for handling temporal data in R (including multivariate time series, panel data, ets). I've been using them for about a year, and I'm still amazed at how much easier it is to do things than using other structures.\n\nWe also have [a paper describing tsibbles and the package](https://robjhyndman.com/publications/tsibble/) for those who want more of the detailed thinking behind the design.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}