{
  "hash": "2f7b7ab09f9ecf129b82954a9d3c6aac",
  "result": {
    "markdown": "---\ndate: 2018-04-14\nslug: forecast83\ntitle: \"forecast v8.3 now on CRAN\"\ncategories:\n  - forecasting\n  - time series\n  - R\n---\n\n\n\n\nThe latest version of the [forecast package for R is now on CRAN](https://cran.r-project.org/package=forecast).  This is the version used in the [2nd edition of my forecasting textbook](https://OTexts.org/fpp2) with George Athanasopoulos. So readers should now be able to replicate all examples in the book using only CRAN packages.\n\nA few new features of the forecast package may be of interest. A more complete [Changelog](http://pkg.robjhyndman.com/forecast/news/) is also available.\n\n## `mstl()` handles multiple seasonality\n\nSTL decomposition was designed to handle a single type of seasonality, but modern data often involves several seasonal periods (e.g., hourly data often has a time of day seasonality, a time of week seasonality and a time of year seasonality). So I introduced the `mstl()` function to handle this situation. Unlike `stl()` is it completely automated, so it is not necessary to specify the seasonal window.\n\nFor example, here is a decomposition of some half-hourly electricity demand data from England and Wales.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_64fe2fa5c3e49bd817b52fa89cc4079b'}\n\n```{.r .cell-code}\nlibrary(forecast)\nlibrary(ggplot2)\nmstl(taylor) %>% autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=768}\n:::\n:::\n\n\nThe daily seasonality is shown as `Seasonal48` while the weekly seasonality is named `Seasonal336`, the names indicating the length of the seasonal period.\n\nThis works by iteratively calling the `stl()` function, each time removing all seasonal components other the one being estimated.\n\nIt also handles non-seasonal time series, in which case it decomposes the series into a trend and a remainder term using Friedman's super smoother (`supsmu`) to estimate the trend.\n\n`mstl()` is now also used internally by `stlf()`, `stlm()`, `tsoutliers()` and `tsclean()`.\n\n## `tsCV()` handles multiple forecast horizons and rolling windows\n\nThe `tsCV()` function introduced in version 8.0 has proven popular, and it has now been extended to simplify the calculation for multiple forecast horizons. So if you specify a horizon $h>1$, the cross-validated errors are returned for all horizons up to and including $h$.\n\nFor example, we can fit an AR(2) model to the lynx data, and compute cross-validation statistics up to horizon 10.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_9628358f0d9e924d14e719da308cb651'}\n\n```{.r .cell-code}\n#Fit an AR(2) model to each rolling origin subset\nfar2 <- function(x, h){forecast(Arima(x, order=c(2,0,0)), h=h)}\ne <- tsCV(lynx, far2, h=10)\n# Compute the MSE values and remove missing values\nmse <- colMeans(e^2, na.rm = T)\n# Plot the MSE values against the forecast horizon\ndata.frame(h = 1:10, MSE = mse) %>%\n  ggplot(aes(x = h, y = MSE/1e6)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n`tsCV()` now also has a `window` argument so the training data can be kept at a constant size.\n\n\n## `auto.arima()` changes\n\nOne aspect of the automatic ARIMA algorithm that I've never been happy with is how it selects the number of seasonal differences. Originally, we used the Canova-Hansen seasonal unit root test, then in v3.0 we switched to using the OCSB test. But neither was particularly satisfactory, partly because neither was designed for this use case. So in v8.3 we have changed again and now use a measure of seasonal strength to determine if a seasonal difference is required or not. The measure is described [here](https://otexts.org/fpp2/seasonal-strength.html). A series with seasonal strength greater than 0.64 is differenced once, otherwise no seasonal differencing is used. We chose the threshold value of 0.64 as that led to the best forecast accuracy on the M3 competition data.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}